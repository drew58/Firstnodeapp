// Parent class - Employee
function Employee(title) {
  this.title = title;
}

Employee.prototype.setTitle = function(newTitle) {
  this.title = newTitle;
};

Employee.prototype.getTitle = function() {
  return this.title;
};

// Child class - Engineer
function Engineer(title, isManager) {
  Employee.call(this, title);
  this.isManager = isManager;
}

Engineer.prototype = Object.create(Employee.prototype); // Inherit from Employee
Engineer.prototype.constructor = Engineer; // Set correct constructor

Engineer.prototype.getIsManager = function() {
  return this.isManager;
};

Engineer.prototype.setIsManager = function(newIsManager) {
  this.isManager = newIsManager;
};

// Usage
var john = new Engineer("Software Engineer", true);
console.log(john.getTitle()); // Output: Software Engineer
console.log(john.getIsManager()); // Output: true

john.setTitle("Senior Engineer");
john.setIsManager(false);
console.log(john.getTitle()); // Output: Senior Engineer
console.log(john.getIsManager()); // Output: false






'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding("ascii");
let inputString = "";
let currentLine = 0;

process.stdin.on("data", function (chunk) {
    inputString += chunk;
});
process.stdin.on("end", function () {
    inputString = inputString.split('\n');
    main();
});

function readLine() {
  return inputString[currentLine++];
}

class ParkingLot {
    // Add the methods here
  constructor(slots) {
    this.slots = slots;
    this.parkingSlots = new Array(slots).fill(null);
  }

  park(carId) {
    for (let i = 0; i < this.slots; i++) {
      if (this.parkingSlots[i] === null) {
        this.parkingSlots[i] = carId;
        return true;
      }
    }
    return false;
  }

  getSlots() {
    return this.parkingSlots.slice();
  }

  remove(carId) {
    for (let i = 0; i < this.slots; i++) {
      if (this.parkingSlots[i] === carId) {
        this.parkingSlots[i] = null;
        return true;
      }
    }
    return false;
  }
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);
    
    const numberOfSlots = parseInt(readLine().trim());
    const parkingLotObj = new ParkingLot(numberOfSlots);
    ws.write(`Parking Lot created with number of slots as ${numberOfSlots}\n`);
    
    let numberOfOperations = parseInt(readLine().trim());
    while (numberOfOperations-- > 0) {
        const inputs = readLine().trim().split(' ');
        const operation = inputs[0];
        const carId = inputs[1];

        switch(operation) {
            case 'Park':
                if (parkingLotObj.park(carId)) {
                    ws.write(`Parking Started: ${carId}\n`);
                } else {
                    ws.write(`Parking Full: ${carId}\n`);
                }
                break;
            case 'Remove':
                if (parkingLotObj.remove(carId)) {
                    ws.write(`Car id ${carId} removed from parking\n`);
                } else {
                    ws.write(`Car: ${carId}Â not found\n`);
                }
                break;
            case 'GetSlots':
                const status = parkingLotObj.getSlots();
                status.forEach((obj, i) => {
                    if (obj) {
                        ws.write(`Parked at slot ${i + 1}: ${obj}\n`);
                    } else {
                        ws.write(`Slot ${i + 1} is empty\n`);
                    }
                })
                break;
            default:
                break;
        }
    }
    ws.end();
}